(ns clojure.tools.nrepl
  {:author "Michiel Borkent, modified for ClojureCLR by David Miller"}
  (:require [clojure.tools.nrepl.impl.server :as server]
            [clojure.tools.nrepl.server.middleware :as middleware]
            [clojure.string :as string])
  (:import [System.Net Dns IPEndPoint IPAddress]
           [System.Net.Sockets TcpListener AddressFamily] ))

(set! *warn-on-reflection* true)

(defn stop-server! [{:keys [socket]}]
  (.Stop ^TcpListener socket))

(defn parse-opt [host+port]
  (let [parts (string/split host+port #":")
        [host port] (if (= 1 (count parts))
                         [nil (Int64/Parse ^String (first parts))]
                         [(first parts)
                          (Int64/Parse  ^String (second parts))])]
    {:host host
     :port port}))

(defn start-server! [& [{:keys [host port quiet]
                             :or {host "127.0.0.1"
                                  port 1667}
                             :as opts}]]
  (let [ctx (assoc {} :sessions (atom #{}))
        opts (assoc opts :xform
                    (get opts :xform
                         middleware/default-xform))
        ;; Calling GetHostEntry with 127.0.0.1 will return all local machine IPs without
        ;; the loopback IP, whereas with localhost will return the loopback IP.
        host (if (= "127.0.0.1" host) "localhost" host)
		host-entry (Dns/GetHostEntry ^String host)
        ip-address (->> host-entry
                        .AddressList
                        (filter #(= (.AddressFamily ^IPAddress %)
                                    AddressFamily/InterNetwork))
                        first)
		ip-endpoint (IPEndPoint. ^IPAddress ip-address (int port))
        tcp-listener (doto (TcpListener. ip-endpoint) (.Start))  ;; start required here in order to pick up .LocalEndPoint
		local-port (.Port ^IPEndPoint (.LocalEndPoint (.Server tcp-listener)))]
    (when-not quiet
      (println (format "Started nREPL server at %s:%d" (.Address ip-endpoint) local-port)))
    {:socket tcp-listener
     :future (future
               (server/listen ctx tcp-listener opts))}))

(defn -main [& args]
  (start-server!))
